{"version":3,"sources":["components/ShowImages/index.js","components/UploadImage/index.js","App.js","serviceWorker.js","index.js"],"names":["ShowImages","this","props","original","sketchUrl","console","log","className","alt","src","window","URL","createObjectURL","download","name","href","title","Component","axios","require","ImageUpload","onDrop","files","a","setState","picture","loading","data","FormData","append","method","url","headers","then","response","catch","err","state","size","color","withIcon","buttonText","onChange","imgExtension","maxFileSize","App","target","UploadImage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0RA+CeA,E,uKA3CH,IAAD,EACyBC,KAAKC,MAA7BC,EADD,EACCA,SAAUC,EADX,EACWA,UAIlB,OAHAC,QAAQC,IAAI,CAAEH,WAAUC,cACxBC,QAAQC,IAAIH,GAAYC,GAEpBD,GAAYC,EAEZ,oCACE,yBAAKG,UAAU,WACb,yBAAKA,UAAU,UACb,4BAAQA,UAAU,UAChB,yBACEC,IAAI,WACJC,IAAKC,OAAOC,IAAIC,gBAAgBT,OAItC,yBAAKI,UAAU,UACb,4BAAQA,UAAU,UAChB,yBAAKC,IAAI,SAASC,IAAKL,OAI7B,yBAAKG,UAAU,WACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,UACb,uBACEM,SAAQ,UAAKV,EAASW,KAAd,eACRC,KAAMX,EACNY,MAAM,YAHR,aAQF,yBAAKT,UAAU,aAKd,S,GAxCYU,aCEnBC,EAAQC,EAAQ,IA8DPC,E,kDA3Db,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAQRmB,OATmB,uCASV,WAAOC,GAAP,eAAAC,EAAA,sDACP,EAAKC,SAAS,CACZC,QAASH,EAAM,GACfI,SAAS,KAELC,EAAO,IAAIC,UACZC,OAAO,UAAWP,EAAM,IAC7BJ,EAAM,CACJY,OAAQ,OACRC,IAAK,oCACLC,QAAS,CACP,eAAgB,uBAElBL,SAECM,KARH,+BAAAV,EAAA,MAQQ,WAAOW,GAAP,SAAAX,EAAA,sDACJ,EAAKC,SAAS,CAAEE,SAAS,EAAOtB,UAAW8B,EAASP,OADhD,2CARR,uDAWGQ,MAXH,+BAAAZ,EAAA,MAWS,WAAOa,GAAP,SAAAb,EAAA,sDACLlB,QAAQC,IAAI,wBAAyB8B,GACrC,EAAKZ,SAAS,CAAEE,SAAS,IAFpB,2CAXT,uDAPO,2CATU,sDAEjB,EAAKW,MAAQ,CACXZ,QAAS,KACTC,SAAS,EACTtB,UAAW,MALI,E,qDAkCjB,OAA2B,IAAvBH,KAAKoC,MAAMX,QAEX,yBAAKnB,UAAU,aACb,kBAAC,cAAD,CAAa+B,KAAM,IAAKC,MAAM,YAKhC,6BACE,kBAAC,IAAD,CACEC,UAAU,EACVC,WAAW,eACXC,SAAUzC,KAAKoB,OACfsB,aAAc,CAAC,OAAQ,OAAQ,OAAQ,QACvCC,YAAa,WAEf,kBAAC,EAAD,CACEzC,SAAUF,KAAKoC,MAAMZ,QACrBrB,UAAWH,KAAKoC,MAAMjC,iB,GArDRa,aC2BX4B,MA7Bf,WACE,OACE,yBAAKtC,UAAU,OACb,6BAASA,UAAU,2BACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,oBACA,uBACEuC,OAAO,SACP/B,KAAK,oCACLR,UAAU,6BAHZ,gCAUN,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WAEf,yBAAKA,UAAU,UACb,kBAACwC,EAAD,OAEF,yBAAKxC,UAAU,cChBHyC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.90e5d238.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\r\nimport React, { Component } from \"react\";\r\n\r\nclass ShowImages extends Component {\r\n  render() {\r\n    const { original, sketchUrl } = this.props;\r\n    console.log({ original, sketchUrl });\r\n    console.log(original && sketchUrl);\r\n\r\n    if (original && sketchUrl) {\r\n      return (\r\n        <>\r\n          <div className=\"columns\">\r\n            <div className=\"column\">\r\n              <figure className=\"image \">\r\n                <img\r\n                  alt=\"uploaded\"\r\n                  src={window.URL.createObjectURL(original)}\r\n                />\r\n              </figure>\r\n            </div>\r\n            <div className=\"column\">\r\n              <figure className=\"image \">\r\n                <img alt=\"sketch\" src={sketchUrl} />\r\n              </figure>\r\n            </div>\r\n          </div>\r\n          <div className=\"columns\">\r\n            <div className=\"column\" />\r\n            <div className=\"column\">\r\n              <a\r\n                download={`${original.name}_sketch.jpg`}\r\n                href={sketchUrl}\r\n                title=\"DOWNLOAD\"\r\n              >\r\n                DOWNLOAD\r\n              </a>\r\n            </div>\r\n            <div className=\"column\" />\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default ShowImages;\r\n","import React, { Component } from \"react\";\r\nimport ImageUploader from \"react-images-upload\";\r\nimport { ClockLoader } from \"react-spinners\";\r\n\r\nimport ShowImages from \"../ShowImages\";\r\nconst axios = require(\"axios\");\r\n\r\nclass ImageUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      picture: null,\r\n      loading: false,\r\n      sketchUrl: null,\r\n    };\r\n  }\r\n\r\n  onDrop = async (files) => {\r\n    this.setState({\r\n      picture: files[0],\r\n      loading: true,\r\n    });\r\n    const data = new FormData();\r\n    data.append(\"picture\", files[0]);\r\n    axios({\r\n      method: \"post\",\r\n      url: \"http://localhost:8000/api/sketch/\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      data,\r\n    })\r\n      .then(async (response) => {\r\n        this.setState({ loading: false, sketchUrl: response.data });\r\n      })\r\n      .catch(async (err) => {\r\n        console.log(\"Error in Image Upload\", err);\r\n        this.setState({ loading: false });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading === true)\r\n      return (\r\n        <div className=\"centerall\">\r\n          <ClockLoader size={150} color=\"purple\" />\r\n        </div>\r\n      );\r\n    else\r\n      return (\r\n        <div>\r\n          <ImageUploader\r\n            withIcon={true}\r\n            buttonText=\"Choose image\"\r\n            onChange={this.onDrop}\r\n            imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\r\n            maxFileSize={10485760}\r\n          />\r\n          <ShowImages\r\n            original={this.state.picture}\r\n            sketchUrl={this.state.sketchUrl}\r\n          />\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ImageUpload;\r\n","/* eslint-disable react/jsx-no-target-blank */\r\n/* eslint-disable jsx-a11y/anchor-has-content */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport UploadImage from \"./components/UploadImage\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <section className=\"hero is-primary is-bold\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            <h1 className=\"title\">Image to Sketch </h1>\r\n            <a\r\n              target=\"_blank\"\r\n              href=\"https://github.com/aashutoshpanda\"\r\n              className=\"give-padding fa fa-github\"\r\n            >\r\n              Check out the Source Code\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div className=\"columns\">\r\n        <div className=\"column\" />\r\n\r\n        <div className=\"column\">\r\n          <UploadImage />\r\n        </div>\r\n        <div className=\"column\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}